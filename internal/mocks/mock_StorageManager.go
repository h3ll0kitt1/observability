// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/h3ll0kitt1/observability/internal/controller (interfaces: StorageManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	controller "github.com/h3ll0kitt1/observability/internal/controller"
	models "github.com/h3ll0kitt1/observability/internal/models"
)

// MockStorageManager is a mock of StorageManager interface.
type MockStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockStorageManagerMockRecorder
}

// MockStorageManagerMockRecorder is the mock recorder for MockStorageManager.
type MockStorageManagerMockRecorder struct {
	mock *MockStorageManager
}

// NewMockStorageManager creates a new mock instance.
func NewMockStorageManager(ctrl *gomock.Controller) *MockStorageManager {
	mock := &MockStorageManager{ctrl: ctrl}
	mock.recorder = &MockStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageManager) EXPECT() *MockStorageManagerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorageManager) Get(arg0 context.Context, arg1 models.MetricsWithValue) (models.MetricsWithValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.MetricsWithValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageManagerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageManager)(nil).Get), arg0, arg1)
}

// GetList mocks base method.
func (m *MockStorageManager) GetList(arg0 context.Context) ([]models.MetricsWithValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0)
	ret0, _ := ret[0].([]models.MetricsWithValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockStorageManagerMockRecorder) GetList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockStorageManager)(nil).GetList), arg0)
}

// Load mocks base method.
func (m *MockStorageManager) Load() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockStorageManagerMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStorageManager)(nil).Load))
}

// Ping mocks base method.
func (m *MockStorageManager) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageManagerMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorageManager)(nil).Ping))
}

// Run mocks base method.
func (m *MockStorageManager) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockStorageManagerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockStorageManager)(nil).Run))
}

// Set mocks base method.
func (m *MockStorageManager) Set(arg0 controller.MainStorage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", arg0)
}

// Set indicates an expected call of Set.
func (mr *MockStorageManagerMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageManager)(nil).Set), arg0)
}

// SetRetryCount mocks base method.
func (m *MockStorageManager) SetRetryCount(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRetryCount", arg0)
}

// SetRetryCount indicates an expected call of SetRetryCount.
func (mr *MockStorageManagerMockRecorder) SetRetryCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRetryCount", reflect.TypeOf((*MockStorageManager)(nil).SetRetryCount), arg0)
}

// SetRetryIncreseWaitTime mocks base method.
func (m *MockStorageManager) SetRetryIncreseWaitTime(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRetryIncreseWaitTime", arg0)
}

// SetRetryIncreseWaitTime indicates an expected call of SetRetryIncreseWaitTime.
func (mr *MockStorageManagerMockRecorder) SetRetryIncreseWaitTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRetryIncreseWaitTime", reflect.TypeOf((*MockStorageManager)(nil).SetRetryIncreseWaitTime), arg0)
}

// SetRetryStartWaitTime mocks base method.
func (m *MockStorageManager) SetRetryStartWaitTime(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRetryStartWaitTime", arg0)
}

// SetRetryStartWaitTime indicates an expected call of SetRetryStartWaitTime.
func (mr *MockStorageManagerMockRecorder) SetRetryStartWaitTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRetryStartWaitTime", reflect.TypeOf((*MockStorageManager)(nil).SetRetryStartWaitTime), arg0)
}

// Update mocks base method.
func (m *MockStorageManager) Update(arg0 context.Context, arg1 models.MetricsWithValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStorageManagerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorageManager)(nil).Update), arg0, arg1)
}

// UpdateList mocks base method.
func (m *MockStorageManager) UpdateList(arg0 context.Context, arg1 []models.MetricsWithValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateList", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateList indicates an expected call of UpdateList.
func (mr *MockStorageManagerMockRecorder) UpdateList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateList", reflect.TypeOf((*MockStorageManager)(nil).UpdateList), arg0, arg1)
}
